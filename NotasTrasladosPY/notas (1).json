{"project":{"profile":{"ide_version":"2020.12.30","name":"notas","description":""},"commands":[{"father":"execScriptPython","command":"import json\nfrom os import mkdir\nfrom os.path import join, exists\n\npath = GetVar(\"workfolder_path\")\n\nwith open(join(path, \"config.json\"), mode='r', encoding='utf8') as fp:\n    data = json.load(fp)\n\n# Crear la carpeta de reportes.\nfolder = join(path, \"reports\")\n# Si la carpeta 'reports' no existe la crea.\nif not exists(folder):\n    mkdir(folder)\n\n# Crear la carpeta de templates.\nfolder = join(path, \"templates\")\nif not exists(folder):\n    mkdir(folder)\n\n# Crear la carpeta de base de datos.\nfolder = join(path, \"database\")\nif not exists(folder):\n    mkdir(folder)\n\n# Crear la carpeta de email.\nfolder = join(path, \"email\")\nif not exists(folder):\n    mkdir(folder)\n\n\nwith open(join(folder, data['email']['email_message']), encoding='utf8') as file:\n    msg = \"\"\n    for line in file.readlines():\n        msg += line\n\nwith open(join(folder, data['email']['email_settings']), encoding='utf8') as fp:\n    email_settings = json.load(fp)\n\nSetVar(\"smtp_server\", data['email']['smtp_server'])\nSetVar(\"smtp_port\", data['email']['smtp_port'])\nSetVar(\"smtp_username\", data['email']['smtp_username'])\nSetVar(\"smtp_password\", data['email']['smtp_password'])\nSetVar(\"email_settings\", email_settings)\nSetVar(\"email_message\", msg)\nSetVar(\"report_name\", data.get(\"report_name\"))\nSetVar(\"db_name\", data.get(\"db_name\"))\nSetVar(\"control_template\", data['templates']['control_template'])\nSetVar(\"nota_template\", data['templates']['nota_template'])\nSetVar(\"epm_template\", data['templates']['epm_template'])\nSetVar(\"comfama_template\", data['templates']['comfama_template'])\n","option":"","var":"","index":0,"group":"scripts","execute":1,"if":"","description":"Configurar las variables de entorno en Rocketbot para la ejecución de RPA.","children":[],"else":[],"id":"2f7f0c15-794e-8eef-5743-4def0527c35a","mode_live":true,"getvar":"","screenshot":"","execute_debbug":0,"img":"","message":"execscriptpython  import json\nfrom os import mkdir\nfrom os.path import join, exists\n\npath = GetVar(\"workfolder_path\")\n\nwith open(join(path, \"config.json\"), mode='r', encoding='utf8') as fp:\n    data = json.load(fp)\n\n# Crear la carpeta de reportes.\nfolder = join(path, \"reports\")\n# Si la carpeta 'reports' no existe la crea.\nif not exists(folder):\n    mkdir(folder)\n\n# Crear la carpeta de templates.\nfolder = join(path, \"templates\")\nif not exists(folder):\n    mkdir(folder)\n\n# Crear la carpeta de base de datos.\nfolder = join(path, \"database\")\nif not exists(folder):\n    mkdir(folder)\n\n# Crear la carpeta de email.\nfolder = join(path, \"email\")\nif not exists(folder):\n    mkdir(folder)\n\n\nwith open(join(folder, data['email']['email_message']), encoding='utf8') as file:\n    msg = \"\"\n    for line in file.readlines():\n        msg += line\n\nwith open(join(folder, data['email']['email_settings']), encoding='utf8') as fp:\n    email_settings = json.load(fp)\n\nSetVar(\"smtp_server\", data['email']['smtp_server'])\nSetVar(\"smtp_port\", data['email']['smtp_port'])\nSetVar(\"smtp_username\", data['email']['smtp_username'])\nSetVar(\"smtp_password\", data['email']['smtp_password'])\nSetVar(\"email_settings\", email_settings)\nSetVar(\"email_message\", msg)\nSetVar(\"report_name\", data.get(\"report_name\"))\nSetVar(\"db_name\", data.get(\"db_name\"))\nSetVar(\"control_template\", data['templates']['control_template'])\nSetVar(\"nota_template\", data['templates']['nota_template'])\nSetVar(\"epm_template\", data['templates']['epm_template'])\nSetVar(\"comfama_template\", data['templates']['comfama_template'])\n","extra":[],"result":"True","line":1,"execute_debugg":0,"time":"0.004265785217285156"},{"father":"execScriptPython","command":"import pandas as pd\nfrom os.path import join\n\npath = GetVar('workfolder_path')\ndb_name = GetVar('db_name')\ndb_path = join(path, 'database', db_name)\n\nEPM = 'EMPRESAS PÚBLICAS DE MEDELLÍN'\nCOMFAMA = 'COMFAMA'\n\nwith open(db_path, mode='rb') as fp:\n    df = pd.read_excel(fp, sheet_name='PRODUCTOS', engine='openpyxl')\n\n# Filtrar productos relacionados con el aliado EPM\ndf_filtered = df[df.ALIADO == EPM]\nproduct_list = df_filtered.PRODUCTO.to_list()\n\nproducts = {\n    'EPM': tuple(product_list)\n}\n\ndf_filtered = df[df.ALIADO == COMFAMA]\nproduct_list = df_filtered.PRODUCTO.to_list()\n\nproducts['COMFAMA'] = tuple(product_list)\n\ndf_filtered = df[(df.ALIADO != COMFAMA) & (df.ALIADO != EPM)]\nproduct_list = df_filtered.PRODUCTO.to_list()\n\nproducts['OTROS'] = tuple(product_list)\n\nSetVar(\"products\", products)\nprint(\"products database Updated.\")\n","option":"","var":"","index":1,"group":"scripts","execute":1,"if":"","children":[],"else":[],"id":"a358a6be-a263-c35f-4354-655e4b79849e","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","execute_debbug":0,"img":"","message":"execscriptpython  import pandas as pd\nfrom os.path import join\n\npath = GetVar('workfolder_path')\ndb_name = GetVar('db_name')\ndb_path = join(path, 'database', db_name)\n\nEPM = 'EMPRESAS PÚBLICAS DE MEDELLÍN'\nCOMFAMA = 'COMFAMA'\n\nwith open(db_path, mode='rb') as fp:\n    df = pd.read_excel(fp, sheet_name='PRODUCTOS', engine='openpyxl')\n\n# Filtrar productos relacionados con el aliado EPM\ndf_filtered = df[df.ALIADO == EPM]\nproduct_list = df_filtered.PRODUCTO.to_list()\n\nproducts = {\n    'EPM': tuple(product_list)\n}\n\ndf_filtered = df[df.ALIADO == COMFAMA]\nproduct_list = df_filtered.PRODUCTO.to_list()\n\nproducts['COMFAMA'] = tuple(product_list)\n\ndf_filtered = df[(df.ALIADO != COMFAMA) & (df.ALIADO != EPM)]\nproduct_list = df_filtered.PRODUCTO.to_list()\n\nproducts['OTROS'] = tuple(product_list)\n\nSetVar(\"products\", products)\nprint(\"products database Updated.\")\n","extra":[],"result":"True","disabled":false,"description":"Construir un diccionario de productos por EPM, Confama y otros.","line":2,"execute_debugg":0,"time":"0.016695261001586914"},{"father":"execScriptPython","command":"from os.path import join, exists\nfrom os import mkdir\nimport pandas as pd\nimport datetime as dt\nimport openpyxl as oxl\nfrom openpyxl.styles import Border, Side\n\npath = GetVar(\"workfolder_path\")\nreport_name = GetVar(\"report_name\")\nonedrive_path = GetVar(\"onedrive_path\")\ntemplate = GetVar(\"control_template\")\ntemplates_path = join(path, \"templates\")\ndb_name = GetVar('db_name')\ndb_path = join(path, 'database', db_name)\n\nproducts = {products}\nproducts = products.get(\n    'EPM') + products.get('COMFAMA') + products.get('OTROS')\nproducts = '|'.join(products)\n\n# Nombre de los reportes xls generados.\nfilename = 'CONSOLIDADO'\n\nglobal today\n\n# Ruta al reporte de notas (carpeta de OneDrive)\nreport_path = join(onedrive_path, report_name)\n\n# Ruta al archivo plantilla Plantilla_ControlOp\ntemplate_path = join(templates_path, template)\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n# Generar el nombre del reporte con la fecha de hoy\nfilename = f'{filename} {today}'\n\n# Crear la carpeta por fecha.\nfolder = join(path, \"reports\", today)\n# Si la carpeta por fecha no existe la crea.\nif not exists(folder):\n    mkdir(folder)\n\n\n# Lectura del reporte de la hoja de reporte de notas.\nwith open(report_path, mode='rb') as fp:\n    df = pd.read_excel(fp, sheet_name='Hoja 1', dtype={'Nro Caso':str})\n\n# Filtrar por columna 'Nro Caso' diferente a 'canal' o 'CANAL'\ndf_filtered = df[~df['Nro Caso'].str.contains('CANAL|canal',na=False)]\n# Filtrar dataframe por productos que esten en la Base de datos\ndf_filtered = df_filtered[df_filtered['Producto'].str.contains(products, na=False)]\n# Reiniciar el indice del dataframe\ndf_filtered.reset_index(drop=True, inplace=True)\n\n\nwith open(db_path, mode='rb') as fp:\n    df = pd.read_excel(fp, 'PRODUCTOS', engine='openpyxl')\n\n# Plantilla de Consolidado control\n# Workbook de la plantilla consolidado control\nworkbook = oxl.load_workbook(template_path)\n# Seleccionar la primera hoja como worksheet\nworksheet = workbook.active\n\ncells = {\n    \"fecha\": (\"Fecha\", 1),\n    \"auxiliar\": (\"AUXILIAR\", 2),\n    \"id\": (\"Id. Nota\", 3),\n    \"centro\": (\"Oficina\", 4),\n    \"naturaleza\": (\"Naturaleza\", 5),\n    \"producto\": (\"Producto\", 6),\n    \"responsable\": (\"Responsable\", 7),\n    \"valor\": (\"Valor\", 8),\n    \"aliado\": (\"ALIADO\", 9),\n    \"obs\": (\"Observaciones\", 10),\n    \"caso\": (\"Nro Caso\", 11)\n}\n\n# Iterar sobre df_filtered para extraer los valores y escribirlos en un archivo basado en\n# la plantilla de template\nmin_row = 3\nmin_col = 1\nmax_col = 11\nif df_filtered.shape[0] > 1:\n    max_row = min_row + df_filtered.shape[0] - 1\n    border_style = Border(\n        left=Side(border_style='thin', color='FF000000'),\n        right=Side(border_style='thin', color='FF000000'),\n        top=Side(border_style='thin', color='FF000000'),\n        bottom=Side(border_style='thin', color='FF000000'),\n    )\n    for row in worksheet.iter_rows(min_row=min_row, max_row=max_row, min_col=min_col, max_col=max_col):\n        for cell in row:\n            cell.border = border_style\n\nfor index, row in df_filtered.iterrows():\n    for col_name, col in cells.values():\n        if col_name == 'Fecha':\n            worksheet.cell(row=index + min_row, column=col, value=today)\n        elif col_name == 'AUXILIAR':\n            auxiliar = df[df.PRODUCTO == row['Producto']].AUXILIAR.to_list()\n            if auxiliar:\n                worksheet.cell(row=index + min_row,\n                               column=col, value=auxiliar[0])\n            else:\n                worksheet.cell(row=index + min_row, column=col, value='')\n        elif col_name == 'ALIADO':\n            aliado = df[df.PRODUCTO == row['Producto']].ALIADO.to_list()\n            if aliado:\n                worksheet.cell(row=index + min_row,\n                               column=col, value=aliado[0])\n            else:\n                worksheet.cell(row=index + min_row, column=col, value='')\n        else:\n            worksheet.cell(row=index + min_row,\n                           column=col, value=row[col_name])\n\nworkbook.save(join(folder, f'{filename}.xlsx'))\nworkbook.close()\nprint(f'{filename} Consolidado general saved.')\n","option":"","var":"","index":2,"group":"scripts","execute":1,"if":"","description":"Generar reporte excel de consolidado.","children":[],"else":[],"id":"db0660c1-f13f-4eb3-8aa7-76ea20443aa9","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","execute_debbug":0,"img":"","message":"execscriptpython  from os.path import join, exists\nfrom os import mkdir\nimport pandas as pd\nimport datetime as dt\nimport openpyxl as oxl\nfrom openpyxl.styles import Border, Side\n\npath = GetVar(\"workfolder_path\")\nreport_name = GetVar(\"report_name\")\nonedrive_path = GetVar(\"onedrive_path\")\ntemplate = GetVar(\"control_template\")\ntemplates_path = join(path, \"templates\")\ndb_name = GetVar('db_name')\ndb_path = join(path, 'database', db_name)\n\nproducts = {products}\nproducts = products.get(\n    'EPM') + products.get('COMFAMA') + products.get('OTROS')\nproducts = '|'.join(products)\n\n# Nombre de los reportes xls generados.\nfilename = 'CONSOLIDADO'\n\nglobal today\n\n# Ruta al reporte de notas (carpeta de OneDrive)\nreport_path = join(onedrive_path, report_name)\n\n# Ruta al archivo plantilla Plantilla_ControlOp\ntemplate_path = join(templates_path, template)\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n# Generar el nombre del reporte con la fecha de hoy\nfilename = f'{filename} {today}'\n\n# Crear la carpeta por fecha.\nfolder = join(path, \"reports\", today)\n# Si la carpeta por fecha no existe la crea.\nif not exists(folder):\n    mkdir(folder)\n\n\n# Lectura del reporte de la hoja de reporte de notas.\nwith open(report_path, mode='rb') as fp:\n    df = pd.read_excel(fp, sheet_name='Hoja 1', dtype={'Nro Caso':str})\n\n# Filtrar por columna 'Nro Caso' diferente a 'canal' o 'CANAL'\ndf_filtered = df[~df['Nro Caso'].str.contains('CANAL|canal',na=False)]\n# Filtrar dataframe por productos que esten en la Base de datos\ndf_filtered = df_filtered[df_filtered['Producto'].str.contains(products, na=False)]\n# Reiniciar el indice del dataframe\ndf_filtered.reset_index(drop=True, inplace=True)\n\n\nwith open(db_path, mode='rb') as fp:\n    df = pd.read_excel(fp, 'PRODUCTOS', engine='openpyxl')\n\n# Plantilla de Consolidado control\n# Workbook de la plantilla consolidado control\nworkbook = oxl.load_workbook(template_path)\n# Seleccionar la primera hoja como worksheet\nworksheet = workbook.active\n\ncells = {\n    \"fecha\": (\"Fecha\", 1),\n    \"auxiliar\": (\"AUXILIAR\", 2),\n    \"id\": (\"Id. Nota\", 3),\n    \"centro\": (\"Oficina\", 4),\n    \"naturaleza\": (\"Naturaleza\", 5),\n    \"producto\": (\"Producto\", 6),\n    \"responsable\": (\"Responsable\", 7),\n    \"valor\": (\"Valor\", 8),\n    \"aliado\": (\"ALIADO\", 9),\n    \"obs\": (\"Observaciones\", 10),\n    \"caso\": (\"Nro Caso\", 11)\n}\n\n# Iterar sobre df_filtered para extraer los valores y escribirlos en un archivo basado en\n# la plantilla de template\nmin_row = 3\nmin_col = 1\nmax_col = 11\nif df_filtered.shape[0] > 1:\n    max_row = min_row + df_filtered.shape[0] - 1\n    border_style = Border(\n        left=Side(border_style='thin', color='FF000000'),\n        right=Side(border_style='thin', color='FF000000'),\n        top=Side(border_style='thin', color='FF000000'),\n        bottom=Side(border_style='thin', color='FF000000'),\n    )\n    for row in worksheet.iter_rows(min_row=min_row, max_row=max_row, min_col=min_col, max_col=max_col):\n        for cell in row:\n            cell.border = border_style\n\nfor index, row in df_filtered.iterrows():\n    for col_name, col in cells.values():\n        if col_name == 'Fecha':\n            worksheet.cell(row=index + min_row, column=col, value=today)\n        elif col_name == 'AUXILIAR':\n            auxiliar = df[df.PRODUCTO == row['Producto']].AUXILIAR.to_list()\n            if auxiliar:\n                worksheet.cell(row=index + min_row,\n                               column=col, value=auxiliar[0])\n            else:\n                worksheet.cell(row=index + min_row, column=col, value='')\n        elif col_name == 'ALIADO':\n            aliado = df[df.PRODUCTO == row['Producto']].ALIADO.to_list()\n            if aliado:\n                worksheet.cell(row=index + min_row,\n                               column=col, value=aliado[0])\n            else:\n                worksheet.cell(row=index + min_row, column=col, value='')\n        else:\n            worksheet.cell(row=index + min_row,\n                           column=col, value=row[col_name])\n\nworkbook.save(join(folder, f'{filename}.xlsx'))\nworkbook.close()\nprint(f'{filename} Consolidado general saved.')\n","extra":[],"result":"True","line":3,"execute_debugg":0,"time":"0.11521053314208984"},{"father":"execScriptPython","command":"from os.path import join, exists\nfrom os import mkdir\nimport pandas as pd\nimport datetime as dt\nimport openpyxl as oxl\n\npath = GetVar(\"workfolder_path\")\nreport_name = GetVar(\"report_name\")\nonedrive_path = GetVar(\"onedrive_path\")\ntemplate = GetVar(\"nota_template\")\ntemplates_path = join(path, \"templates\")\nproducts = {products}\n\n# products = products.get('EPM') + products.get('COMFAMA')\nproducts = products.get('OTROS')\nproducts = '|'.join(products)\n\n# Nombre de los reportes xls generados.\n# filename = 'nota'\n# Nombre de la carpeta donde serán almacenados los reportes generados.\nfolder_name = 'notas'\n\nglobal today\n\n# Ruta al reporte de notas (carpeta de OneDrive)\nreport_path = join(onedrive_path, report_name)\n\n# Ruta al archivo plantilla PDF_Nota\ntemplate_path = join(templates_path, template)\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# Crear la carpeta por fecha.\nfolder = join(path, \"reports\", today)\n# Si la carpeta por fecha no existe la crea.\nif not exists(folder):\n    mkdir(folder)\n\n# Crear carpeta para notas\nfolder = join(folder, folder_name)\nif not exists(folder):\n    mkdir(folder)\n\n# Lectura del reporte de la hoja de reporte de notas.\nwith open(report_path, mode='rb') as fp:\n    df = pd.read_excel(fp, sheet_name='Hoja 1', dtype={'Nro Caso':str})\n\n# Filtrar por columna 'Nro Caso' diferente a 'canal' o 'CANAL'\ndf_filtered = df[~df['Nro Caso'].str.contains('CANAL|canal', na=False)]\n\n# Crear un Dataframe para productos diferentes a REC EPM EN LINEA o PAGO CONFAMA\ndf_filtered = df_filtered[df_filtered['Producto'].str.contains(products, na=False)]\n# df_filtered = df_filtered[~df_filtered['Producto'].str.contains(products)]\ndf_filtered.reset_index(drop=True, inplace=True)\n# print(df_filtered)\n\n# Plantilla de Nota\n# Workbook de la plantilla nota\nworkbook = oxl.load_workbook(template_path)\n# Seleccionar la primera hoja como worksheet\nworksheet = workbook.active\n\ncells = {\n    \"no\": (\"Id. Nota\", 7),\n    \"tipo\": (\"Naturaleza\", 8),\n    \"cc\": (\"Responsable\", 9),\n    \"oficina\": (\"Oficina\", 10),\n    \"centro\": (\"Oficina\", 11),\n    \"valor\": (\"Valor\", 12),\n    \"producto\": (\"Producto\", 13),\n    \"caso\": (\"Nro Caso\", 14),\n    \"obs\": (\"Observaciones\", 16)\n}\n\n# Iterar sobre df_filtered para extraer los valores y escribirlos en un archivo basado en\n# la plantilla de template\nfor index, row in df_filtered.iterrows():\n    # Insertar la fecha de la nota \"fecha\": (today, 5)\n    worksheet.cell(5, 3, f'{today}')\n    for col_name, _row in cells.values():\n        if col_name == 'Id. Nota':\n            filename = row[col_name]\n            worksheet.cell(row=_row, column=3, value=row[col_name])\n        elif col_name == 'Valor':\n            worksheet.cell(row=_row, column=3, value=f'${row[col_name]:,}')\n        elif col_name == 'Oficina':\n            if _row == 10:\n                worksheet.cell(row=_row, column=3,\n                               value=row[col_name].split('|')[1])\n            if _row == 11:\n                worksheet.cell(row=_row, column=3,\n                               value=row[col_name].split('|')[0])\n        else:\n            worksheet.cell(row=_row, column=3, value=row[col_name])\n    workbook.save(join(folder, f'{filename}_{today}.xlsx'))\n    print(f'{filename}_{today} saved.')\nworkbook.close()\nprint(\"All notas generated\")\n","option":"","var":"","index":3,"group":"scripts","execute":1,"if":"","description":"Generar reportes excel por cada nota del consolidado.","children":[],"else":[],"id":"7d1500ed-a488-7409-2270-de8cea0ba412","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","execute_debbug":0,"img":"","message":"execscriptpython  from os.path import join, exists\nfrom os import mkdir\nimport pandas as pd\nimport datetime as dt\nimport openpyxl as oxl\n\npath = GetVar(\"workfolder_path\")\nreport_name = GetVar(\"report_name\")\nonedrive_path = GetVar(\"onedrive_path\")\ntemplate = GetVar(\"nota_template\")\ntemplates_path = join(path, \"templates\")\nproducts = {products}\n\n# products = products.get('EPM') + products.get('COMFAMA')\nproducts = products.get('OTROS')\nproducts = '|'.join(products)\n\n# Nombre de los reportes xls generados.\n# filename = 'nota'\n# Nombre de la carpeta donde serán almacenados los reportes generados.\nfolder_name = 'notas'\n\nglobal today\n\n# Ruta al reporte de notas (carpeta de OneDrive)\nreport_path = join(onedrive_path, report_name)\n\n# Ruta al archivo plantilla PDF_Nota\ntemplate_path = join(templates_path, template)\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# Crear la carpeta por fecha.\nfolder = join(path, \"reports\", today)\n# Si la carpeta por fecha no existe la crea.\nif not exists(folder):\n    mkdir(folder)\n\n# Crear carpeta para notas\nfolder = join(folder, folder_name)\nif not exists(folder):\n    mkdir(folder)\n\n# Lectura del reporte de la hoja de reporte de notas.\nwith open(report_path, mode='rb') as fp:\n    df = pd.read_excel(fp, sheet_name='Hoja 1', dtype={'Nro Caso':str})\n\n# Filtrar por columna 'Nro Caso' diferente a 'canal' o 'CANAL'\ndf_filtered = df[~df['Nro Caso'].str.contains('CANAL|canal', na=False)]\n\n# Crear un Dataframe para productos diferentes a REC EPM EN LINEA o PAGO CONFAMA\ndf_filtered = df_filtered[df_filtered['Producto'].str.contains(products, na=False)]\n# df_filtered = df_filtered[~df_filtered['Producto'].str.contains(products)]\ndf_filtered.reset_index(drop=True, inplace=True)\n# print(df_filtered)\n\n# Plantilla de Nota\n# Workbook de la plantilla nota\nworkbook = oxl.load_workbook(template_path)\n# Seleccionar la primera hoja como worksheet\nworksheet = workbook.active\n\ncells = {\n    \"no\": (\"Id. Nota\", 7),\n    \"tipo\": (\"Naturaleza\", 8),\n    \"cc\": (\"Responsable\", 9),\n    \"oficina\": (\"Oficina\", 10),\n    \"centro\": (\"Oficina\", 11),\n    \"valor\": (\"Valor\", 12),\n    \"producto\": (\"Producto\", 13),\n    \"caso\": (\"Nro Caso\", 14),\n    \"obs\": (\"Observaciones\", 16)\n}\n\n# Iterar sobre df_filtered para extraer los valores y escribirlos en un archivo basado en\n# la plantilla de template\nfor index, row in df_filtered.iterrows():\n    # Insertar la fecha de la nota \"fecha\": (today, 5)\n    worksheet.cell(5, 3, f'{today}')\n    for col_name, _row in cells.values():\n        if col_name == 'Id. Nota':\n            filename = row[col_name]\n            worksheet.cell(row=_row, column=3, value=row[col_name])\n        elif col_name == 'Valor':\n            worksheet.cell(row=_row, column=3, value=f'${row[col_name]:,}')\n        elif col_name == 'Oficina':\n            if _row == 10:\n                worksheet.cell(row=_row, column=3,\n                               value=row[col_name].split('|')[1])\n            if _row == 11:\n                worksheet.cell(row=_row, column=3,\n                               value=row[col_name].split('|')[0])\n        else:\n            worksheet.cell(row=_row, column=3, value=row[col_name])\n    workbook.save(join(folder, f'{filename}_{today}.xlsx'))\n    print(f'{filename}_{today} saved.')\nworkbook.close()\nprint(\"All notas generated\")\n","extra":[],"result":"True","line":4,"execute_debugg":0,"time":"0.22664761543273926"},{"father":"execScriptPython","command":"from os.path import join\nfrom os import listdir\nimport datetime as dt\nimport pdfkit\n\nfrom xlsx2html import xlsx2html\n\nimport pdfkit\n\npath = GetVar(\"workfolder_path\")\n\n# Nombre de la carpeta donde serán almacenados los reportes generados.\nfolder_name = 'notas'\n\nglobal today\n\n\ndef correct_file_encoding(path: str) -> None:\n    with open(path, mode='r', encoding='latin1') as fp:\n        html = \"\"\"\"\"\"\n        for line in fp.readlines():\n            html += line\n    with open(path, mode='w', encoding='utf8') as fp:\n        fp.write(html)\n\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# ruta de la carpeta donde estan almacenados los reportes a convertir.\nfolder = join(path, \"reports\", today, folder_name)\n\nfiles = [file.split('.')[0] for file in listdir(folder)]\n\nfor file in files:\n    filepath = join(folder, f'{file}.xlsx')\n    html_path = join(folder, f'{file}.html')\n    pdf_path = join(path, \"reports\", today, f'{file}.pdf')\n    # Generar archivo html\n    fp = xlsx2html(filepath, html_path)\n    fp.close()\n    # Corregir codificación html\n    correct_file_encoding(html_path)\n    # Generar pdf del archivo\n    pdfkit.from_file(html_path, pdf_path)\nprint(\"All notas converted to pdf\")\n","index":4,"execute_debugg":0,"img":"","screenshot":"","line":5,"description":"Convertir todos los reportes de notas de excel a pdf.","id":"185e8a78-aa6c-1d32-0439-456eb96c392e","group":"scripts","mode_live":true,"children":[],"else":[],"execute":1,"message":"execscriptpython  from os.path import join\nfrom os import listdir\nimport datetime as dt\nimport pdfkit\n\nfrom xlsx2html import xlsx2html\n\nimport pdfkit\n\npath = GetVar(\"workfolder_path\")\n\n# Nombre de la carpeta donde serán almacenados los reportes generados.\nfolder_name = 'notas'\n\nglobal today\n\n\ndef correct_file_encoding(path: str) -> None:\n    with open(path, mode='r', encoding='latin1') as fp:\n        html = \"\"\"\"\"\"\n        for line in fp.readlines():\n            html += line\n    with open(path, mode='w', encoding='utf8') as fp:\n        fp.write(html)\n\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# ruta de la carpeta donde estan almacenados los reportes a convertir.\nfolder = join(path, \"reports\", today, folder_name)\n\nfiles = [file.split('.')[0] for file in listdir(folder)]\n\nfor file in files:\n    filepath = join(folder, f'{file}.xlsx')\n    html_path = join(folder, f'{file}.html')\n    pdf_path = join(path, \"reports\", today, f'{file}.pdf')\n    # Generar archivo html\n    fp = xlsx2html(filepath, html_path)\n    fp.close()\n    # Corregir codificación html\n    correct_file_encoding(html_path)\n    # Generar pdf del archivo\n    pdfkit.from_file(html_path, pdf_path)\nprint(\"All notas converted to pdf\")\n","time":"12.822254180908203","extra":[]},{"father":"execScriptPython","command":"from os.path import join, exists\nfrom os import mkdir\nimport pandas as pd\nimport datetime as dt\nimport openpyxl as oxl\nfrom openpyxl.styles import Border, Side\n\npath = GetVar(\"workfolder_path\")\nreport_name = GetVar(\"report_name\")\nonedrive_path = GetVar(\"onedrive_path\")\ntemplate = GetVar(\"epm_template\")\ntemplates_path = join(path, \"templates\")\nproducts = {products}\n\nproducts = products.get('EPM')\nproducts = '|'.join(products)\n\n# Nombre de los reportes xls generados.\nfilename = 'Consolidado_EPM'\n# Nombre de la carpeta donde serán almacenados los reportes generados.\nfolder_name = 'epm'\n\nglobal today\n\n# Ruta al reporte de notas (carpeta de OneDrive)\nreport_path = join(onedrive_path, report_name)\n\n# Ruta al archivo plantilla PDF_Nota\ntemplate_path = join(templates_path, template)\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# Crear la carpeta por fecha.\nfolder = join(path, \"reports\", today)\n# Si la carpeta por fecha no existe la crea.\nif not exists(folder):\n    mkdir(folder)\n\n# Crear carpeta para consolidado\nfolder = join(folder, folder_name)\nif not exists(folder):\n    mkdir(folder)\n\n# Lectura del reporte de la hoja de reporte de notas.\nwith open(report_path, mode='rb') as fp:\n    df = pd.read_excel(fp, sheet_name='Hoja 1', dtype={'Nro Caso':str})\n\n# Filtrar por columna 'Nro Caso' diferente a 'canal' o 'CANAL'\ndf_filtered = df[~df['Nro Caso'].str.contains('CANAL|canal', na=False)]\n\n# Crear un Dataframe para productos EPM\ndf_filtered = df_filtered[df_filtered['Producto'].str.contains(products, na=False)]\ndf_filtered.reset_index(drop=True, inplace=True)\n# print(df_filtered)\n\n# Plantilla de consolidado epm\n# Workbook de la plantilla consolidado epm\nworkbook = oxl.load_workbook(template_path)\n# Seleccionar la primera hoja como worksheet\nworksheet = workbook.active\n\ncells = {\n    \"id\": (\"Id. Nota\", 2),\n    \"centro\": (\"Oficina\", 3),\n    \"naturaleza\": (\"Naturaleza\", 4),\n    \"caso\": (\"Nro Caso\", 5),\n    \"producto\": (\"Producto\", 6),\n    \"responsable\": (\"Responsable\", 7),\n    \"obs\": (\"Observaciones\", 8),\n    \"valor\": (\"Valor\", 9),\n    \"aliado\": (\"EPM\", 10)\n}\n\n# Iterar sobre df_filtered para extraer los valores y escribirlos en un archivo basado en\n# la plantilla de template\n# Estilo de las celdas\nborder_style = Border(\n    left=Side(border_style='thin', color='FF000000'),\n    right=Side(border_style='thin', color='FF000000'),\n    top=Side(border_style='thin', color='FF000000'),\n    bottom=Side(border_style='thin', color='FF000000'),\n)\n# Rango de la plantilla\nmin_row = 11\nmin_col = 2\nmax_col = 10\nmax_row = min_row\nif df_filtered.shape[0] > 1:\n    max_row = min_row + df_filtered.shape[0] - 1\n    for row in worksheet.iter_rows(min_row=min_row, max_row=max_row, min_col=min_col, max_col=max_col):\n        for cell in row:\n            cell.border = border_style\n\ntotal = 0\nworksheet.cell(1, 6, f'{today}')\nfor index, row in df_filtered.iterrows():\n    for col_name, col in cells.values():\n        if col_name == 'EPM':\n            worksheet.cell(row=index + min_row, column=col, value=col_name)\n        elif col_name == 'Valor':\n            total += int(row[col_name])\n            worksheet.cell(row=index + min_row,\n                           column=col, value=f'${row[col_name]:,}')\n        else:\n            worksheet.cell(row=index + min_row,\n                           column=col, value=row[col_name])\n\ntotal_cell = worksheet.cell(\n    row=max_row + 1, column=cells.get('valor')[1], value=f'${total:,}')\ntotal_cell.border = border_style\nworksheet.cell(4, 6, f'${total:,}')\nworkbook.save(join(folder, f'{filename}_{today}.xlsx'))\nworkbook.close()\nprint(f'{filename}_{today} saved.')\n","option":"","var":"","index":5,"group":"scripts","execute":1,"if":"","description":"Generar reporte excel por cada producto del aliado EPM a partir del consolidado.","children":[],"else":[],"id":"4a4925dd-6e2a-9a8b-e4ff-1203d7e4dbf2","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","execute_debbug":0,"img":"","message":"execscriptpython  from os.path import join, exists\nfrom os import mkdir\nimport pandas as pd\nimport datetime as dt\nimport openpyxl as oxl\nfrom openpyxl.styles import Border, Side\n\npath = GetVar(\"workfolder_path\")\nreport_name = GetVar(\"report_name\")\nonedrive_path = GetVar(\"onedrive_path\")\ntemplate = GetVar(\"epm_template\")\ntemplates_path = join(path, \"templates\")\nproducts = {products}\n\nproducts = products.get('EPM')\nproducts = '|'.join(products)\n\n# Nombre de los reportes xls generados.\nfilename = 'Consolidado_EPM'\n# Nombre de la carpeta donde serán almacenados los reportes generados.\nfolder_name = 'epm'\n\nglobal today\n\n# Ruta al reporte de notas (carpeta de OneDrive)\nreport_path = join(onedrive_path, report_name)\n\n# Ruta al archivo plantilla PDF_Nota\ntemplate_path = join(templates_path, template)\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# Crear la carpeta por fecha.\nfolder = join(path, \"reports\", today)\n# Si la carpeta por fecha no existe la crea.\nif not exists(folder):\n    mkdir(folder)\n\n# Crear carpeta para consolidado\nfolder = join(folder, folder_name)\nif not exists(folder):\n    mkdir(folder)\n\n# Lectura del reporte de la hoja de reporte de notas.\nwith open(report_path, mode='rb') as fp:\n    df = pd.read_excel(fp, sheet_name='Hoja 1', dtype={'Nro Caso':str})\n\n# Filtrar por columna 'Nro Caso' diferente a 'canal' o 'CANAL'\ndf_filtered = df[~df['Nro Caso'].str.contains('CANAL|canal', na=False)]\n\n# Crear un Dataframe para productos EPM\ndf_filtered = df_filtered[df_filtered['Producto'].str.contains(products, na=False)]\ndf_filtered.reset_index(drop=True, inplace=True)\n# print(df_filtered)\n\n# Plantilla de consolidado epm\n# Workbook de la plantilla consolidado epm\nworkbook = oxl.load_workbook(template_path)\n# Seleccionar la primera hoja como worksheet\nworksheet = workbook.active\n\ncells = {\n    \"id\": (\"Id. Nota\", 2),\n    \"centro\": (\"Oficina\", 3),\n    \"naturaleza\": (\"Naturaleza\", 4),\n    \"caso\": (\"Nro Caso\", 5),\n    \"producto\": (\"Producto\", 6),\n    \"responsable\": (\"Responsable\", 7),\n    \"obs\": (\"Observaciones\", 8),\n    \"valor\": (\"Valor\", 9),\n    \"aliado\": (\"EPM\", 10)\n}\n\n# Iterar sobre df_filtered para extraer los valores y escribirlos en un archivo basado en\n# la plantilla de template\n# Estilo de las celdas\nborder_style = Border(\n    left=Side(border_style='thin', color='FF000000'),\n    right=Side(border_style='thin', color='FF000000'),\n    top=Side(border_style='thin', color='FF000000'),\n    bottom=Side(border_style='thin', color='FF000000'),\n)\n# Rango de la plantilla\nmin_row = 11\nmin_col = 2\nmax_col = 10\nmax_row = min_row\nif df_filtered.shape[0] > 1:\n    max_row = min_row + df_filtered.shape[0] - 1\n    for row in worksheet.iter_rows(min_row=min_row, max_row=max_row, min_col=min_col, max_col=max_col):\n        for cell in row:\n            cell.border = border_style\n\ntotal = 0\nworksheet.cell(1, 6, f'{today}')\nfor index, row in df_filtered.iterrows():\n    for col_name, col in cells.values():\n        if col_name == 'EPM':\n            worksheet.cell(row=index + min_row, column=col, value=col_name)\n        elif col_name == 'Valor':\n            total += int(row[col_name])\n            worksheet.cell(row=index + min_row,\n                           column=col, value=f'${row[col_name]:,}')\n        else:\n            worksheet.cell(row=index + min_row,\n                           column=col, value=row[col_name])\n\ntotal_cell = worksheet.cell(\n    row=max_row + 1, column=cells.get('valor')[1], value=f'${total:,}')\ntotal_cell.border = border_style\nworksheet.cell(4, 6, f'${total:,}')\nworkbook.save(join(folder, f'{filename}_{today}.xlsx'))\nworkbook.close()\nprint(f'{filename}_{today} saved.')\n","extra":[],"result":"True","line":6,"execute_debugg":0,"time":"0.07931065559387207"},{"father":"execScriptPython","command":"from os.path import join\nfrom os import listdir\nimport datetime as dt\nimport pdfkit\nfrom xlsx2html import xlsx2html\n\npath = GetVar(\"workfolder_path\")\n\n# Nombre de la carpeta donde serán almacenados los reportes generados.\nfolder_name = 'epm'\n\nglobal today\n\n\n\ndef correct_file_encoding(path: str) -> None:\n    with open(path, mode='r', encoding='latin1') as fp:\n        html = \"\"\"\"\"\"\n        for line in fp.readlines():\n            html += line\n    with open(path, mode='w', encoding='utf8') as fp:\n        fp.write(html)\n\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# ruta de la carpeta donde estan almacenados los reportes a convertir.\nfolder = join(path, \"reports\", today, folder_name)\n\nfiles = [file.split('.')[0] for file in listdir(folder)]\n\nfor file in files:\n    filepath = join(folder, f'{file}.xlsx')\n    html_path = join(folder, f'{file}.html')\n    pdf_path = join(path, \"reports\", today, f'{file}.pdf')\n    # Generar archivo html\n    fp = xlsx2html(filepath, html_path)\n    fp.close()\n    # Corregir codificación html\n    correct_file_encoding(html_path)\n    # Generar pdf del archivo\n    pdfkit.from_file(html_path, pdf_path)\nprint(\"Consolidado EPM converted to pdf\")\n","index":6,"execute_debugg":0,"img":"","screenshot":"","line":7,"description":"Convertir el reporte de EPM de excel a pdf.","id":"9aa35e42-ce2d-adda-8090-01bcefa4613c","group":"scripts","mode_live":true,"children":[],"else":[],"execute":1,"message":"execscriptpython  from os.path import join\nfrom os import listdir\nimport datetime as dt\nimport pdfkit\nfrom xlsx2html import xlsx2html\n\npath = GetVar(\"workfolder_path\")\n\n# Nombre de la carpeta donde serán almacenados los reportes generados.\nfolder_name = 'epm'\n\nglobal today\n\n\n\ndef correct_file_encoding(path: str) -> None:\n    with open(path, mode='r', encoding='latin1') as fp:\n        html = \"\"\"\"\"\"\n        for line in fp.readlines():\n            html += line\n    with open(path, mode='w', encoding='utf8') as fp:\n        fp.write(html)\n\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# ruta de la carpeta donde estan almacenados los reportes a convertir.\nfolder = join(path, \"reports\", today, folder_name)\n\nfiles = [file.split('.')[0] for file in listdir(folder)]\n\nfor file in files:\n    filepath = join(folder, f'{file}.xlsx')\n    html_path = join(folder, f'{file}.html')\n    pdf_path = join(path, \"reports\", today, f'{file}.pdf')\n    # Generar archivo html\n    fp = xlsx2html(filepath, html_path)\n    fp.close()\n    # Corregir codificación html\n    correct_file_encoding(html_path)\n    # Generar pdf del archivo\n    pdfkit.from_file(html_path, pdf_path)\nprint(\"Consolidado EPM converted to pdf\")\n","time":"1.0627691745758057","extra":[]},{"father":"execScriptPython","command":"from os.path import join, exists\nfrom os import mkdir\nimport pandas as pd\nimport datetime as dt\nimport openpyxl as oxl\nfrom openpyxl.styles import Border, Side\n\npath = GetVar(\"workfolder_path\")\nreport_name = GetVar(\"report_name\")\nonedrive_path = GetVar(\"onedrive_path\")\ntemplate = GetVar(\"comfama_template\")\ntemplates_path = join(path, \"templates\")\nproducts = {products}\n\nproducts = products.get('COMFAMA')\nproducts = '|'.join(products)\n\n# Nombre de los reportes xls generados.\nfilename = 'Consolidado_COMFAMA'\n# Nombre de la carpeta donde serán almacenados los reportes generados.\nfolder_name = 'comfama'\n\nglobal today\n\n# Ruta al reporte de notas (carpeta de OneDrive)\nreport_path = join(onedrive_path, report_name)\n\n# Ruta al archivo plantilla PDF_Nota\ntemplate_path = join(templates_path, template)\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# Crear la carpeta por fecha.\nfolder = join(path, \"reports\", today)\n# Si la carpeta por fecha no existe la crea.\nif not exists(folder):\n    mkdir(folder)\n\n# Crear carpeta para consolidado\nfolder = join(folder, folder_name)\nif not exists(folder):\n    mkdir(folder)\n\n# Lectura del reporte de la hoja de reporte de notas.\nwith open(report_path, mode='rb') as fp:\n    df = pd.read_excel(fp, sheet_name='Hoja 1', dtype={'Nro Caso':str})\n\n# Filtrar por columna 'Nro Caso' diferente a 'canal' o 'CANAL'\ndf_filtered = df[~df['Nro Caso'].str.contains('CANAL|canal', na=False)]\n\n# Crear un Dataframe para productos PAGO CONFAMA\ndf_filtered = df_filtered[df_filtered['Producto'].str.contains(products, na=False)]\ndf_filtered.reset_index(drop=True, inplace=True)\n# print(df_filtered)\n\n# Plantilla de consolidado epm\n# Workbook de la plantilla consolidado epm\nworkbook = oxl.load_workbook(template_path)\n# Seleccionar la primera hoja como worksheet\nworksheet = workbook.active\n\ncells = {\n    \"id\": (\"Id. Nota\", 2),\n    \"centro\": (\"Oficina\", 3),\n    \"naturaleza\": (\"Naturaleza\", 4),\n    \"caso\": (\"Nro Caso\", 5),\n    \"producto\": (\"Producto\", 6),\n    \"responsable\": (\"Responsable\", 7),\n    \"obs\": (\"Observaciones\", 8),\n    \"valor\": (\"Valor\", 9),\n    \"aliado\": (\"COMFAMA\", 10)\n}\n\n# Iterar sobre df_filtered para extraer los valores y escribirlos en un archivo basado en\n# la plantilla de template\n# Estilo de celda\nborder_style = Border(\n    left=Side(border_style='thin', color='FF000000'),\n    right=Side(border_style='thin', color='FF000000'),\n    top=Side(border_style='thin', color='FF000000'),\n    bottom=Side(border_style='thin', color='FF000000'),\n)\n# Rango de la plantilla\nmin_row = 10\nmin_col = 2\nmax_col = 10\nif df_filtered.shape[0] > 1:\n    max_row = min_row + df_filtered.shape[0] - 1\n    for row in worksheet.iter_rows(min_row=min_row, max_row=max_row, min_col=min_col, max_col=max_col):\n        for cell in row:\n            cell.border = border_style\n\nworksheet.cell(1, 6, f'{today}')\nfor index, row in df_filtered.iterrows():\n    for col_name, col in cells.values():\n        if col_name == 'COMFAMA':\n            worksheet.cell(row=index + min_row, column=col, value=col_name)\n        elif col_name == 'Valor':\n            worksheet.cell(row=index + min_row, column=col,\n                           value=f'${row[col_name]:,}')\n        else:\n            worksheet.cell(row=index + min_row,\n                           column=col, value=row[col_name])\n\nworkbook.save(join(folder, f'{filename}_{today}.xlsx'))\nworkbook.close()\nprint(f'{filename}_{today} saved.')\n","option":"","var":"","index":7,"group":"scripts","execute":1,"if":"","description":"Generar reporte excel por cada producto del aliado COMFAMA a partir del consolidado.","children":[],"else":[],"id":"262686f9-e6ae-ade3-8e6e-af8d26195383","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","execute_debbug":0,"img":"","message":"execscriptpython  from os.path import join, exists\nfrom os import mkdir\nimport pandas as pd\nimport datetime as dt\nimport openpyxl as oxl\nfrom openpyxl.styles import Border, Side\n\npath = GetVar(\"workfolder_path\")\nreport_name = GetVar(\"report_name\")\nonedrive_path = GetVar(\"onedrive_path\")\ntemplate = GetVar(\"comfama_template\")\ntemplates_path = join(path, \"templates\")\nproducts = {products}\n\nproducts = products.get('COMFAMA')\nproducts = '|'.join(products)\n\n# Nombre de los reportes xls generados.\nfilename = 'Consolidado_COMFAMA'\n# Nombre de la carpeta donde serán almacenados los reportes generados.\nfolder_name = 'comfama'\n\nglobal today\n\n# Ruta al reporte de notas (carpeta de OneDrive)\nreport_path = join(onedrive_path, report_name)\n\n# Ruta al archivo plantilla PDF_Nota\ntemplate_path = join(templates_path, template)\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# Crear la carpeta por fecha.\nfolder = join(path, \"reports\", today)\n# Si la carpeta por fecha no existe la crea.\nif not exists(folder):\n    mkdir(folder)\n\n# Crear carpeta para consolidado\nfolder = join(folder, folder_name)\nif not exists(folder):\n    mkdir(folder)\n\n# Lectura del reporte de la hoja de reporte de notas.\nwith open(report_path, mode='rb') as fp:\n    df = pd.read_excel(fp, sheet_name='Hoja 1', dtype={'Nro Caso':str})\n\n# Filtrar por columna 'Nro Caso' diferente a 'canal' o 'CANAL'\ndf_filtered = df[~df['Nro Caso'].str.contains('CANAL|canal', na=False)]\n\n# Crear un Dataframe para productos PAGO CONFAMA\ndf_filtered = df_filtered[df_filtered['Producto'].str.contains(products, na=False)]\ndf_filtered.reset_index(drop=True, inplace=True)\n# print(df_filtered)\n\n# Plantilla de consolidado epm\n# Workbook de la plantilla consolidado epm\nworkbook = oxl.load_workbook(template_path)\n# Seleccionar la primera hoja como worksheet\nworksheet = workbook.active\n\ncells = {\n    \"id\": (\"Id. Nota\", 2),\n    \"centro\": (\"Oficina\", 3),\n    \"naturaleza\": (\"Naturaleza\", 4),\n    \"caso\": (\"Nro Caso\", 5),\n    \"producto\": (\"Producto\", 6),\n    \"responsable\": (\"Responsable\", 7),\n    \"obs\": (\"Observaciones\", 8),\n    \"valor\": (\"Valor\", 9),\n    \"aliado\": (\"COMFAMA\", 10)\n}\n\n# Iterar sobre df_filtered para extraer los valores y escribirlos en un archivo basado en\n# la plantilla de template\n# Estilo de celda\nborder_style = Border(\n    left=Side(border_style='thin', color='FF000000'),\n    right=Side(border_style='thin', color='FF000000'),\n    top=Side(border_style='thin', color='FF000000'),\n    bottom=Side(border_style='thin', color='FF000000'),\n)\n# Rango de la plantilla\nmin_row = 10\nmin_col = 2\nmax_col = 10\nif df_filtered.shape[0] > 1:\n    max_row = min_row + df_filtered.shape[0] - 1\n    for row in worksheet.iter_rows(min_row=min_row, max_row=max_row, min_col=min_col, max_col=max_col):\n        for cell in row:\n            cell.border = border_style\n\nworksheet.cell(1, 6, f'{today}')\nfor index, row in df_filtered.iterrows():\n    for col_name, col in cells.values():\n        if col_name == 'COMFAMA':\n            worksheet.cell(row=index + min_row, column=col, value=col_name)\n        elif col_name == 'Valor':\n            worksheet.cell(row=index + min_row, column=col,\n                           value=f'${row[col_name]:,}')\n        else:\n            worksheet.cell(row=index + min_row,\n                           column=col, value=row[col_name])\n\nworkbook.save(join(folder, f'{filename}_{today}.xlsx'))\nworkbook.close()\nprint(f'{filename}_{today} saved.')\n","extra":[],"result":"True","line":8,"execute_debugg":0,"time":"0.06601524353027344"},{"father":"execScriptPython","command":"from os.path import join\nfrom os import listdir\nimport datetime as dt\nimport pdfkit\nfrom xlsx2html import xlsx2html\n\npath = GetVar(\"workfolder_path\")\n\n# Nombre de la carpeta donde serán almacenados los reportes generados.\nfolder_name = 'comfama'\n\nglobal today\n\n\ndef correct_file_encoding(path: str) -> None:\n    with open(path, mode='r', encoding='latin1') as fp:\n        html = \"\"\"\"\"\"\n        for line in fp.readlines():\n            html += line\n    with open(path, mode='w', encoding='utf8') as fp:\n        fp.write(html)\n\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# ruta de la carpeta donde estan almacenados los reportes a convertir.\nfolder = join(path, \"reports\", today, folder_name)\n\nfiles = [file.split('.')[0] for file in listdir(folder)]\n# print(files)\nfor file in files:\n    filepath = join(folder, f'{file}.xlsx')\n    html_path = join(folder, f'{file}.html')\n    pdf_path = join(path, \"reports\", today, f'{file}.pdf')\n    # Generar archivo html\n    fp = xlsx2html(filepath, html_path)\n    fp.close()\n    # Corregir codificación html\n    correct_file_encoding(html_path)\n    # Generar pdf del archivo\n    pdfkit.from_file(html_path, pdf_path)\nprint(\"Consolidado COMFAMA converted to pdf\")\n","option":"","var":"","index":8,"group":"scripts","execute":1,"if":"","description":"Convertir el reporte de COMFAMA de excel a pdf.","children":[],"else":[],"id":"47344fa0-1217-1537-d83a-8f25940c43c9","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","execute_debbug":0,"img":"","message":"execscriptpython  from os.path import join\nfrom os import listdir\nimport datetime as dt\nimport pdfkit\nfrom xlsx2html import xlsx2html\n\npath = GetVar(\"workfolder_path\")\n\n# Nombre de la carpeta donde serán almacenados los reportes generados.\nfolder_name = 'comfama'\n\nglobal today\n\n\ndef correct_file_encoding(path: str) -> None:\n    with open(path, mode='r', encoding='latin1') as fp:\n        html = \"\"\"\"\"\"\n        for line in fp.readlines():\n            html += line\n    with open(path, mode='w', encoding='utf8') as fp:\n        fp.write(html)\n\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# ruta de la carpeta donde estan almacenados los reportes a convertir.\nfolder = join(path, \"reports\", today, folder_name)\n\nfiles = [file.split('.')[0] for file in listdir(folder)]\n# print(files)\nfor file in files:\n    filepath = join(folder, f'{file}.xlsx')\n    html_path = join(folder, f'{file}.html')\n    pdf_path = join(path, \"reports\", today, f'{file}.pdf')\n    # Generar archivo html\n    fp = xlsx2html(filepath, html_path)\n    fp.close()\n    # Corregir codificación html\n    correct_file_encoding(html_path)\n    # Generar pdf del archivo\n    pdfkit.from_file(html_path, pdf_path)\nprint(\"Consolidado COMFAMA converted to pdf\")\n","extra":[],"result":"True","line":9,"execute_debugg":0,"time":"0.6720249652862549"},{"father":"execScriptPython","command":"from os import listdir\nfrom os.path import join, isdir, relpath, exists, isfile\nimport datetime as dt\nimport zipfile\n\npath = GetVar('workfolder_path')\n\nglobal today\n\ntoday = dt.datetime.now().strftime(\"%d-%m-%Y\")\n\nfolder = join(path, 'reports', today)\n\n# files =  [file for file in listdir(folder) if not isdir(join(folder, file))]\n\nfiles = []\nfor file in listdir(folder):\n    if not isdir(join(folder, file)) and not file.endswith('xlsx'):\n        files.append(file)\n\nzip_path = join(folder, 'Resultado.zip')\n\nif not isfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zfp:\n        for file in files:\n            relative = relpath(join(folder, file), start=join(\n                path, 'reports', 'notification'))\n            # print(relative)\n            zfp.write(filename=join(folder, file), arcname=relative)\n    print(\"Zip file created.\")\nelse:\n    print(\"Zip file already exists.\")\n\n","option":"","var":"","index":9,"group":"scripts","execute":1,"if":"","description":"Genera un archivo zip con todos los reportes comprimidos.","children":[],"else":[],"id":"01b274f8-66e6-df90-c711-4d8fa4e84259","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","execute_debbug":0,"img":"","message":"execscriptpython  from os import listdir\nfrom os.path import join, isdir, relpath, exists, isfile\nimport datetime as dt\nimport zipfile\n\npath = GetVar('workfolder_path')\n\nglobal today\n\ntoday = dt.datetime.now().strftime(\"%d-%m-%Y\")\n\nfolder = join(path, 'reports', today)\n\n# files =  [file for file in listdir(folder) if not isdir(join(folder, file))]\n\nfiles = []\nfor file in listdir(folder):\n    if not isdir(join(folder, file)) and not file.endswith('xlsx'):\n        files.append(file)\n\nzip_path = join(folder, 'Resultado.zip')\n\nif not isfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zfp:\n        for file in files:\n            relative = relpath(join(folder, file), start=join(\n                path, 'reports', 'notification'))\n            # print(relative)\n            zfp.write(filename=join(folder, file), arcname=relative)\n    print(\"Zip file created.\")\nelse:\n    print(\"Zip file already exists.\")\n\n","extra":[],"result":"True","line":10,"execute_debugg":0,"time":"0.02045917510986328"},{"father":"execScriptPython","command":"from email import encoders\nimport smtplib\nfrom os.path import join, dirname\nimport datetime as dt\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.base import MIMEBase\n\n# Variables de entorno\npath = GetVar('workfolder_path')\n# Configuración del servicio de correo para enviar reportes por SMTP\nport = {smtp_port}\nemail_settings = {email_settings}\nmsg = GetVar(\"email_message\")\nserver = GetVar(\"smtp_server\")\nusername = GetVar(\"smtp_username\")\npassword = GetVar(\"smtp_password\")\n\n# (L15-20) Definición de las variables para configuración del servicio de correo\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# print(email_settings.get('recipients'))\n# 1. Definición de un objecto MIMEMultipart para generar un nuevo mensaje.\n# 2. Configuración de los recipientes para envío de correo (message['To']) (Pendiente lista de correo).\n# 3. Configuración del asunto del correo (message['Subject']).\n# 4. Adjuntar el cuerpo del correo al mensaje.\n# 5. Definición de un objeto MIMEBase que sirve para cargar un archivo PDF y adjuntarlo en el mensaje.\n\n# 1. Definición de un objecto MIMEMultipart para generar un nuevo mensaje\n\n# Configuración del formato del email\nmessage = MIMEMultipart()\nmessage['From'] = username\n\n# 2. Configuración de los recipientes para envío de correo (message['To']) (Pendiente lista de correo)\nmessage['To'] = ','.join(email_settings.get('recipients'))\n\n# 3. Configuración del asunto del correo (message['Subject'])\nsubject = email_settings.get('subject').replace('$(fecha)', today)\nmessage[\"Subject\"] = subject\n\n# 4. Adjuntar el cuerpo del correo al mensaje.\n# message.attach(MIMEText(msg, 'plain', 'utf8'))\nmessage.attach(MIMEText(msg, 'plain'))\n\n# 5. Definición de un objeto MIMEImage que sirve para cargar una imagen y adjuntarla en el mensaje.\n# ruta de la carpeta donde estan almacenado el archivo zip y el consolidado.\nfolder = join(path, \"reports\", today)\nzip_path = join(folder, 'Resultado.zip')\nreport_path = join(folder, f'CONSOLIDADO {today}.xlsx')\n\n# Inserción del archivo zip en el mensaje.\nwith open(zip_path, mode='rb') as part:\n    zip_file = MIMEBase(\"application\", \"zip\")\n    zip_file.set_payload(part.read())\n\nencoders.encode_base64(zip_file)\n\nzip_file.add_header(\"Content-Disposition\", \"attachment\",\n                    filename=\"Resultado.zip\")\nmessage.attach(zip_file)\n\n# Inserción del consolidado excel en el mensaje.\nwith open(report_path, mode='rb') as part:\n    excel_file = MIMEBase('application', 'octet-stream')\n    excel_file.set_payload(part.read())\n\nencoders.encode_base64(excel_file)\nexcel_file.add_header('Content-Disposition', 'attachment',\n                      filename='Consolidado.xlsx')\nmessage.attach(excel_file)\n\n# Envío de correo mediante una conexión SMTP a la bandeja de correo especificada en la configuración\ntry:\n    with smtplib.SMTP(host=server, port=port, timeout=60) as conn:\n        conn.starttls()\n        conn.login(user=username, password=password)\n        conn.sendmail(from_addr=username, to_addrs=email_settings.get('recipients'),\n                      msg=message.as_string())\nexcept Exception as e:\n    print(f\"The connection has thrown an error: {e}\")\n    # file.write(\n    #     f\"ERROR [{dt.datetime.now()}] The connection with email server timed out.\\n\")\nelse:\n    print(\"The message has been sent successfully\")\n    # file.write(\n    #     f\"INFO [{dt.datetime.now()}] Report sucessfully sent to receivers_list.\\n\")\n","option":"","var":"","index":10,"group":"scripts","execute":1,"if":"","description":"Envia un correo electrónico con los reportes creados por el robot a los recipientes especificados en la lista.","children":[],"else":[],"id":"e6828b19-1293-5736-0579-d0890860e186","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","execute_debbug":0,"img":"","message":"execscriptpython  from email import encoders\nimport smtplib\nfrom os.path import join, dirname\nimport datetime as dt\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.base import MIMEBase\n\n# Variables de entorno\npath = GetVar('workfolder_path')\n# Configuración del servicio de correo para enviar reportes por SMTP\nport = {smtp_port}\nemail_settings = {email_settings}\nmsg = GetVar(\"email_message\")\nserver = GetVar(\"smtp_server\")\nusername = GetVar(\"smtp_username\")\npassword = GetVar(\"smtp_password\")\n\n# (L15-20) Definición de las variables para configuración del servicio de correo\n\n# Declaración de una variable para la fecha de hoy\ntoday = dt.datetime.today().strftime(\"%d-%m-%Y\")\n\n# print(email_settings.get('recipients'))\n# 1. Definición de un objecto MIMEMultipart para generar un nuevo mensaje.\n# 2. Configuración de los recipientes para envío de correo (message['To']) (Pendiente lista de correo).\n# 3. Configuración del asunto del correo (message['Subject']).\n# 4. Adjuntar el cuerpo del correo al mensaje.\n# 5. Definición de un objeto MIMEBase que sirve para cargar un archivo PDF y adjuntarlo en el mensaje.\n\n# 1. Definición de un objecto MIMEMultipart para generar un nuevo mensaje\n\n# Configuración del formato del email\nmessage = MIMEMultipart()\nmessage['From'] = username\n\n# 2. Configuración de los recipientes para envío de correo (message['To']) (Pendiente lista de correo)\nmessage['To'] = ','.join(email_settings.get('recipients'))\n\n# 3. Configuración del asunto del correo (message['Subject'])\nsubject = email_settings.get('subject').replace('$(fecha)', today)\nmessage[\"Subject\"] = subject\n\n# 4. Adjuntar el cuerpo del correo al mensaje.\n# message.attach(MIMEText(msg, 'plain', 'utf8'))\nmessage.attach(MIMEText(msg, 'plain'))\n\n# 5. Definición de un objeto MIMEImage que sirve para cargar una imagen y adjuntarla en el mensaje.\n# ruta de la carpeta donde estan almacenado el archivo zip y el consolidado.\nfolder = join(path, \"reports\", today)\nzip_path = join(folder, 'Resultado.zip')\nreport_path = join(folder, f'CONSOLIDADO {today}.xlsx')\n\n# Inserción del archivo zip en el mensaje.\nwith open(zip_path, mode='rb') as part:\n    zip_file = MIMEBase(\"application\", \"zip\")\n    zip_file.set_payload(part.read())\n\nencoders.encode_base64(zip_file)\n\nzip_file.add_header(\"Content-Disposition\", \"attachment\",\n                    filename=\"Resultado.zip\")\nmessage.attach(zip_file)\n\n# Inserción del consolidado excel en el mensaje.\nwith open(report_path, mode='rb') as part:\n    excel_file = MIMEBase('application', 'octet-stream')\n    excel_file.set_payload(part.read())\n\nencoders.encode_base64(excel_file)\nexcel_file.add_header('Content-Disposition', 'attachment',\n                      filename='Consolidado.xlsx')\nmessage.attach(excel_file)\n\n# Envío de correo mediante una conexión SMTP a la bandeja de correo especificada en la configuración\ntry:\n    with smtplib.SMTP(host=server, port=port, timeout=60) as conn:\n        conn.starttls()\n        conn.login(user=username, password=password)\n        conn.sendmail(from_addr=username, to_addrs=email_settings.get('recipients'),\n                      msg=message.as_string())\nexcept Exception as e:\n    print(f\"The connection has thrown an error: {e}\")\n    # file.write(\n    #     f\"ERROR [{dt.datetime.now()}] The connection with email server timed out.\\n\")\nelse:\n    print(\"The message has been sent successfully\")\n    # file.write(\n    #     f\"INFO [{dt.datetime.now()}] Report sucessfully sent to receivers_list.\\n\")\n","extra":[],"result":"True","disabled":false,"line":11,"execute_debugg":0,"time":"3.717238664627075"},{"father":"stop","command":"","option":"","var":"","index":11,"group":"scripts","execute":1,"if":"","children":[],"else":[],"id":"4bd73f96-8703-842d-3736-9b9f2d9b8157","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","execute_debbug":0,"img":"","extra":[],"result":true,"line":12,"execute_debugg":0}],"vars":[{"name":"workfolder_path","data":"C:\\Users\\aprendiz.gestion\\Downloads\\Notas y traslados","type":"string","collapse":true,"$$hashKey":"object:571","category":""},{"name":"onedrive_path","data":"C:\\Users\\aprendiz.gestion\\Downloads\\Notas y traslados\\Onedrive","type":"string","collapse":true,"$$hashKey":"object:572","category":""},{"name":"report_name","data":"reporte de notas.xls","type":"string","collapse":true,"$$hashKey":"object:573"},{"name":"db_name","data":"BD Productos Conciliaciones V1.xlsx","type":"string","collapse":true,"$$hashKey":"object:574"},{"name":"nota_template","data":"Plantilla_PDF_Nota.xlsx","type":"string","collapse":true,"$$hashKey":"object:575"},{"name":"epm_template","data":"Plantilla_PDF_EPM.xlsx","type":"string","collapse":true,"$$hashKey":"object:576"},{"name":"products","data":"{'EPM': ('RECAUDOS EPM EN LINEA', 'RECAUDO PAGA A TU MEDIDA', 'REC EPM EN LINEA'), 'COMFAMA': ('PAGO COMFAMA',), 'OTROS': ('REC LEBON', 'REC DOLCE', 'REC FUNERALES ANTIOQ', 'REC PLACE TO PAY', 'RECAUDO CIA IDIOMAS', 'ZONA VIRTUAL\\nREC NATURA ', 'REC JAMAR', 'RECAUDO AGAVAL', 'RECAUDO MEDIA NARANJA', 'REC RINKU CONEKTO', 'RECAUDO FUCSIA FUCSIA', 'RECAUDO VELONET', 'RECAUDO FLYPASS', 'RECAUDO INTERACTUAR', 'REC COOGRANADA', 'REC FED CAFETEROS', 'RECAUDOS SISTECREDITO', 'RECAUDO FLAMINGO', 'TARJETA FLAMINGO', 'RECAUDO PAYU', 'RECAUDO AVON', 'RECAUDO YANBAL', 'RECAUDO SAFETYPAY', 'RECAUDO PAGO DIGITAL', 'RECAUDO AXA COLPATRIA', 'REC OPTIMA DE URABA', 'RECAUDOS JARDINES DEL EDEN', 'REC SAN GABRIEL', 'REC CAPILLAS DE LA FE', 'REC PROEXEQUIALES', 'REC FUNERARIA GOMEZ', 'RECAUDO FUNERARIA SAN JUAN BAUTISTA', 'REC FUN INMACULADA', 'REC SANTA CLARA', 'REC UBIKME', 'REC PREVER', 'F COMPASION', 'REC RESURGIR', 'REC ESCOBAR', 'REC CABLEMAS', 'FUNERARIA RENACER', 'RECAUDO LOS OLIVOS', 'REC SAN GABRIEL MED', 'REC ANORI', 'REC OFFCORSS', 'FUN SAN VICENTE', 'RECAUDO SAN NICOLAS', 'RECAUDO LOS LAURELES', 'FUNERARIA NAZARENO', 'REC FERIA DE CREDITO', 'REC RITUALES FUNERARIOS', 'RECAUDOS TELEVID', 'RECAUDO AVANTEL', 'RECAUDO MI BOLSILLO', 'RECAUDO ESIKA LBEL CYZONE', 'RECAUDO PROSEGUR', 'RECAUDO DUPREE', 'RECAUDO DATACREDITO', 'RECAUDO WOM', 'RECAUDO EMONKEY', 'RECAUDO SERVICREDITO', 'REC LEONISA', 'REC MARKETING PERSON', 'RECAUDO RUTTA', 'REC COBELEN', 'RECAUDOS PAYVALIDA', 'RECAUDO ELECTROFERIA', 'REC DIRECTV', 'RECAUDO CREDITOS PLANAUTOS', 'RECAUDO PLUSS TV', 'GEOLINK', 'REC EPAYCO', 'REC VISION GERENCIAL', 'RECAUDO ELECTROBELLO', 'SOAT', 'REC INTERACTUAR', 'RECAUDO FUNERARIA NAZARENO ', 'REC NATURA', 'RECAUDOS LOGUIN', 'RECAUDOS LA ESPERANZA', 'RECAUDO REAL HUMAN', 'RECAUDO PACIFIKA', 'RECAUDOS CARMEL', 'RECAUDO YERBABUENA', 'PAGOS COBELEN', 'RECAUDO COORDIUTIL', 'RIO APP', 'PAGOS INTERACTURA', 'PAGOS PROVEEDORES INTERACTUAL', 'RECAUDO GEOLINK', 'RECAUDO AVON (NACIONAL)', 'DEPOSITO BANCO AGRARIO', 'PAGO CARTERA BANCO AGRARIO', 'PAGO TARJETA DE CREDITO BANCO AGRARIO', 'RECAUDO BANCO AGRARIO', 'RETIRO BANCO AGRARIO', 'RECAUDO OFICINAS LOTICOLOMBIA', 'REC VENDEDORES LOTICOLOMBIA', 'REC LIMA CIA', 'REC PRODUCTOS CARIBE', 'SAN GABRIEL MED', 'REC ELECTROBELLO', 'REC LAURELES', 'LA MEDIA NARANJA', 'FINAMIGA', 'FEM AHORROS', 'FEM CONVENIOS', 'FEM FERIAS', 'FEM CREDITOS', 'PAGOS FEMFUTURO', 'PAGO GIROS', 'RETIROS BET PLAY', 'OKI')}","type":"string","collapse":true,"$$hashKey":"object:577"},{"name":"comfama_template","data":"Plantilla_PDF_Comfama.xlsx","type":"string","collapse":true,"$$hashKey":"object:578"},{"name":"control_template","data":"Plantilla_ControlOp.xlsx","type":"string","collapse":true,"$$hashKey":"object:579"},{"name":"smtp_server","data":"smtp.office365.com","type":"string","collapse":true,"$$hashKey":"object:580"},{"name":"smtp_username","data":"correo.automatizacion@gruporeditos.com","type":"string","collapse":true,"$$hashKey":"object:581"},{"name":"smtp_password","data":"Reditos2023*","type":"string","collapse":true,"$$hashKey":"object:582"},{"name":"smtp_port","data":"587","type":"string","collapse":true,"$$hashKey":"object:583"},{"name":"email_settings","data":"{'subject': 'Entrega Notas Control de Operaciones $(fecha)', 'recipients': ['aprendiz.gestion@gruporeditos.com']}","type":"string","collapse":true,"$$hashKey":"object:584"},{"name":"email_message","data":"﻿Buenos días,\n \nMediante el proceso automático RPA se hace entrega a Contabilidad de las notas creadas\npor canales como se relaciona en el archivo adjunto, así mismo, se envían los soportes en\nPDF de las notas en mención.\n\nCualquier duda o inquietud con la información reportada contacta al siguiente correo\nadjuntando la evidencia correspondiente alejandra.olarte@gruporeditos.com.\n\nNOTA: Por favor seguir el sigueinte procedimiento para la extraccion de la informacion,\npaso 1: Descargar el .zip,  paso 2: dar click derecho al archivo, paso 3: selecionar la opcion 7zip y  paso 4: selecionar extraer aqui(extract here).\n\nPor favor no responder ni enviar correos de respuesta a \nla cuenta \nautomata.mercadeo@gruporeditos.com. \n \nCordialmente,","type":"string","collapse":true,"$$hashKey":"object:585"}],"ifs":[],"expose":{"title":{"en":"notas expose","es":"notas expose","pr":"notas expose"},"description":{"en":"","es":"","pr":""},"form":[]},"modules":[]}}